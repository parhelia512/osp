--- socat-1.8.0.0/test.sh	2025-10-24 16:55:09.733283419 -0700
+++ test.sh	2025-10-24 16:55:14.335277371 -0700
@@ -13088,67 +13088,6 @@
 # OpenSSL ECDHE ciphers were introduced in socat 1.7.3.0 but in the same release
 # they were broken by a porting effort. This test checks if OpenSSL ECDHE works
 # 2019-02: this does no longer work (Ubuntu-18.04)
-NAME=OPENSSL_ECDHE
-case "$TESTS" in
-*%$N%*|*%functions%*|*%bugs%*|*%openssl%*|*%socket%*|*%listen%*|*%$NAME%*)
-TEST="$NAME: test OpenSSL ECDHE"
-# generate a ECDHE key, start an OpenSSL server, connect with a client and try to
-# pass data
-if ! eval $NUMCOND; then :;
-elif ! testfeats openssl >/dev/null; then
-    $PRINTF "test $F_n $TEST... ${YELLOW}OPENSSL not available${NORMAL}\n" $N
-    numCANT=$((numCANT+1))
-    listCANT="$listCANT $N"
-elif ! openssl ciphers |grep -q '\<ECDHE\>'; then
-    $PRINTF "test $F_n $TEST... ${YELLOW}openssl: cipher ECDHE not available${NORMAL}\n" $N
-    numCANT=$((numCANT+1))
-    listCANT="$listCANT $N"
-else
-tf="$td/test$N.stdout"
-te="$td/test$N.stderr"
-tdiff="$td/test$N.diff"
-da="test$N $(date) $RANDOM"
-#TESTSRV=./testsrvec; gentesteccert $TESTSRV
-TESTSRV=./testsrv; gentestcert $TESTSRV
-newport tcp4
-CMD0="$TRACE $SOCAT $opts OPENSSL-LISTEN:$PORT,pf=ip4,$REUSEADDR,cert=$TESTSRV.crt,key=$TESTSRV.pem,verify=0 PIPE"
-CMD1="$TRACE $SOCAT $opts - OPENSSL-CONNECT:$LOCALHOST:$PORT,pf=ip4,cipher=ECDHE-ECDSA-AES256-GCM-SHA384,cafile=$TESTSRV.crt,verify=0"
-printf "test $F_n $TEST... " $N
-$CMD0 >/dev/null 2>"${te}0" &
-pid0=$!
-waittcp4port $PORT 1
-echo "$da" |$CMD1 >"${tf}1" 2>"${te}1"
-rc1=$?
-kill $pid0 2>/dev/null; wait 
-if [ $rc1 -ne 0 ]; then
-    $PRINTF "$FAILED\n"
-    echo "failure symptom: client error" >&2
-    echo "server and stderr:" >&2
-    echo "$CMD0 &"
-    cat "${te}0"
-    echo "client and stderr:" >&2
-    echo "$CMD1"
-    cat "${te}1"
-    numFAIL=$((numFAIL+1))
-    listFAIL="$listFAIL $N"
-elif echo "$da" |diff - "${tf}1" >"$tdiff"; then
-    $PRINTF "$OK\n"
-    numOK=$((numOK+1))
-else
-    $PRINTF "$FAILED\n"
-    echo "server and stderr:" >&2
-    echo "$CMD1"
-    cat "${te}1"
-    echo "client and stderr:" >&2
-    echo "$CMD0 &"
-    cat "${te}0"
-    numFAIL=$((numFAIL+1))
-    listFAIL="$listFAIL $N"
-fi
-fi # NUMCOND
- ;;
-esac
-N=$((N+1))
 
 
 # option ipv6-join-group "could not be used"
